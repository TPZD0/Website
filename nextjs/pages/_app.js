import "@/styles/globals.css";
import "@/styles/figma.css";
import React from "react";
import { useRouter } from "next/router";
import { AppCacheProvider } from "@mui/material-nextjs/v13-pagesRouter";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import { Roboto } from "next/font/google";
// Figma pages manage their own layout; remove old layout wrapper
import useBearStore from "@/store/useBearStore";
import Head from "next/head";
import { Backdrop, CircularProgress } from "@mui/material";
import { Toaster } from "sonner";

const roboto = Roboto({
  weight: ["300", "400", "500", "700"],
  subsets: ["latin"],
  display: "swap",
});

const theme = createTheme({
  palette: {},
  typography: {
    fontFamily: roboto.style.fontFamily,
  },
});

export default function App({ Component, pageProps, props }) {
  const router = useRouter();
  const [loading, setLoading] = React.useState(false);
  const setAppName = useBearStore((state) => state.setAppName);
  const pageName = router.pathname;
  const sessionIdRef = React.useRef(null);
  const startTimeRef = React.useRef(0);

  const startSession = React.useCallback(async (path) => {
    try {
      startTimeRef.current = Date.now();
      const resp = await fetch('/api/session/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ path }),
        credentials: 'include',
      });
      if (!resp.ok) return;
      const data = await resp.json();
      sessionIdRef.current = data.session_id || null;
      try {
        localStorage.setItem('sp_active_session_started_at', new Date().toISOString());
      } catch {}
      try { window.dispatchEvent(new Event('session-started')); } catch {}
    } catch {}
  }, []);

  const endSession = React.useCallback(async () => {
    try {
      if (!sessionIdRef.current) return;
      const dur = Math.max(1, Math.round((Date.now() - (startTimeRef.current || Date.now())) / 1000));
      await fetch('/api/session/end', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ session_id: sessionIdRef.current, duration_seconds: dur }),
        credentials: 'include',
      });
    } catch {}
    finally {
      sessionIdRef.current = null;
      startTimeRef.current = 0;
      try { localStorage.removeItem('sp_active_session_started_at'); } catch {}
      try { window.dispatchEvent(new Event('session-ended')); } catch {}
    }
  }, []);

  React.useEffect(() => {
    console.log("App load", pageName, router.query);
    setLoading(true);
    // TODO: This section is use to handle page change.
    setAppName("Say Hi")
    setLoading(false);
    // Start a new session on first mount and when route completes
    startSession(router.asPath);
    const handleRouteChangeStart = () => {
      endSession();
    };
    const handleRouteChangeComplete = (url) => {
      startSession(url);
    };
    router.events.on('routeChangeStart', handleRouteChangeStart);
    router.events.on('routeChangeComplete', handleRouteChangeComplete);
    const beforeUnload = () => { endSession(); };
    window.addEventListener('beforeunload', beforeUnload);
    return () => {
      window.removeEventListener('beforeunload', beforeUnload);
      router.events.off('routeChangeStart', handleRouteChangeStart);
      router.events.off('routeChangeComplete', handleRouteChangeComplete);
      endSession();
    };
  }, [router, pageName]);

  return (
    <React.Fragment>
      <Head>
        <title>{`Application`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppCacheProvider {...props}>
        <ThemeProvider theme={theme}>
          <Component {...pageProps} />
          <Toaster position="top-right" richColors />
        </ThemeProvider>
      </AppCacheProvider>
    </React.Fragment>
  );
}
